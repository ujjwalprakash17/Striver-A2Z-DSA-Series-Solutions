1. When the problem is based on intervals, where we need to find intervals
   type 1: minimum no of groups required to form non overlapping intervals.  
    maximum number of overlapping intervals at any time = minimum number of groups required, such that
   no two intervals should be overlapping.

2. Read about the concept of problem : Zero Array Transformation I
   Approach : Based on the inteval Value we need to find the number of occurance of elements in that interval for
   Ex : [[0, 2] , [1,4], [0, 5], [3, 5]] is poore interval me 1 kitni baar hai 0, kitni baar
   also both inclusive
   Solution : har interval ke starting index ko +1 kro aur (ending element + 1) ko -1 kro
   for example
   index -> [0] => val = 1;
   index -> [3] => val = -1;
   aur aisa krte krte phir har ek element ko array ke each element ke prefixSum ke value se replace krte chalo

3. Take K of Each Character From Left and Right:
   Problem : Read the problem and then you will know that we need to count the value from both sides and which side
   to choose first is very tough to find out.
   we can't even apply dp.
   In this case we need to use sliding window, but
   -> Very Important : to apply sliding window on two ends of the array,
   we can also use Reverse engineering and will try to find out the middle window where out of the windows elements
   occurances are greater than >= k.
   we need to maximize the size of windows so that we can extend the window, and
   this is what our approach will be.

4. finding the pivot element in binarySearch 
   finding the smallest element in sorted and rotated array
   Approach : 
   1. Tip : Whenever we need not to check last element, we can keep e = mid, and 
   if we need to check startInd then we can keep it as s = mid + 1;
   Now whenever the value of mid is smaller than the value of end 
   then e = mid; 
   else s = mid + 1;
   return the start Index 


5. When the problem is based on intervals, where we need to find intervals
   type 1: minimum no of groups required to form non overlapping intervals.  
   maximum number of overlapping intervals at any time = minimum number of groups required, such that
   no two intervals should be overlapping.

6. Read about the concept of problem : Zero Array Transformation I
   Approach : Based on the inteval Value we need to find the number of occurance of elements in that interval for
   Ex : [[0, 2] , [1,4], [0, 5], [3, 5]] is poore interval me 1 kitni baar hai 0, kitni baar
   also both inclusive
   Solution : har interval ke starting index ko +1 kro aur (ending element + 1) ko -1 kro
   for example
   index -> [0] => val = 1;
   index -> [3] => val = -1;
   aur aisa krte krte phir har ek element ko array ke each element ke prefixSum ke value se replace krte chalo

7. Take K of Each Character From Left and Right:
   Problem : Read the problem and then you will know that we need to count the value from both sides and which side
   to choose first is very tough to find out.
   we can't even apply dp.
   In this case we need to use sliding window, but
   -> Very Important : to apply sliding window on two ends of the array,
   we can also use Reverse engineering and will try to find out the middle window where out of the windows elements
   occurances are greater than >= k.
   we need to maximize the size of windows so that we can extend the window, and
   this is what our approach will be.

4.


   

---------------------------------------------------------------------------------------------------

Date : 09-12-24
1. Sieve of Eratothenes
    vector<int> sieveOfEratosthenes(int N) {
        vector<bool> isPrime(N + 1, true); // Use boolean instead of integers 
        vector<int> ans; 
        // Mark 0 and 1 as non-prime 
        isPrime[0] = isPrime[1] = false; 
        for (int i = 2; i * i <= N; i++) { 
        if (isPrime[i]) { 
            // Start marking from i*i, not from 2*i 
            for (int j = i * i; j <= N; j += i) { 
                isPrime[j] = false; 
                } 
            } 
        } 
        for (int i = 2; i <= N; i++) { 
            if (isPrime[i]) { 
                ans.push_back(i); 
            } 
        } 
        return ans;
    }
2. To Check whether an long long is an Integer Use condition like : 
    long long v = some_value;
    if(v == (int) v)
        return true; 

3.  Gcd Code : 
    int gcd(int a, int b){
        if(b == 0) 
            return a;
        return gcd(b, a % b);
    }

4. Minimum Jumps 
    Approach : Greedy Approach will work there
    Code : 
    int minJumps(vector<int> &arr){
        // code here
        if (arr[0] == 0)
            return -1;
        int noOfJumps = 1;
        int i = 1, remJumps = arr[0];
        int n = arr.size();
        while (i < n)
        {
            int maxJump = 1;
            while (remJumps--)
            {
                maxJump = max(maxJump - 1, arr[i]);
                if (i == n - 1)
                    return noOfJumps;
                i++;
            }
            if (maxJump <= 0)
                return -1;
            noOfJumps++;
            remJumps = maxJump;
        }
        return noOfJumps;
    }

5. Print All Divisors from 1 to N
    Approach : We need to find the check for every number 
            for every number will check will the sqrt of the number only
    Code : 
    int sumOfDivisors(int n) {
        // Write Your Code here
        long long totalSum = 0;
        for(int i = 1; i <= n ; i++){
            for(int j = 1; j * j <= i ; j++){
                if(i % j == 0){
                    totalSum += j;
                    if(j != i / j){
                        totalSum += i / j;
                    }
                }
            }
        }
        return (int)totalSum ;
    }

6. Max Prod Array
   Here we will loop from left and right and try to find the max sub array 
   also will move from right to left and  try to find max sub array 
   Note : Reset the prod val to 1, whenever encountered 0. 

7. Next Permutation : 
    Approach : 
    1. Find the first element from right, where nums[i-1] < nums[i]
    2. Find the first element from right where nums[i] > nums[ind]
    3. Swap the element at nums[i] and nums[ind]
    4. Reverse the array from ind + 1 to end of the array.

8. Longest Consequtive sequence 
    Approach : 
    1. Store all the elements in the set
    2. Loop throught the set and check if the element -1 of the current element exists or not 
    3. If not then start the loop from the current element + 1, and keep the counter as cnt + 1, and update the current val + 1
    4. Update the max value of the cnt and return the max value as longest





26-02-25 -------> To Revise -  
1. Maximum Absolute Sum of Any Subarray
    Approach : 
    1. Find the maximum subarray sum and minimum subarray sum (Kadane's Algorithm)
    2. Return the maximum of the absolute value of the maximum subarray sum and minimum subarray sum
    3. CRITICAL NOTE : initialise answer with the first value of array in both

2. Set Matrix 0
    Approach : 
    1. check for the first row and col if they contain 0 or not
    2. loop from 1 -> n and 1 -> m and check if any of them contains 0 then set both row and column to 0 
    3. at last check and set the first row and column if they contain 0;

3. Kanh's Algorithm (Topological Sort using BFS)
    Approach : 
    1. Store the indegree of all the nodes
    2. Store the nodes with indegree 0 in the queue
    3. Loop through the queue and pop the element and push the element in the answer
    4. Decrease the indegree of the nodes and if the indegree becomes 0 then push the element in the queue

4. Cycle Detection in a Directed Graph using BFS (using Kanh's Algorithm)
    Approach : 
    1. Doing usual Kanhs Algorithm
    2. At last will check the answer array, if the size of ans array is equal to n then no cycle 
    3. Since Kanhs Algorithm will only work for Directed Acyclic Graph
    4. if the size of ans array is not equal to n then there is a cycle




28-02-25
1. Implement Trie
    Approach : Using unordered_map
    1. Create a TrieNode with unordered_map<char, TrieNode*>
    2. Insert the word in the trie
    3. Search the word in the trie
    4. Search the prefix in the trie