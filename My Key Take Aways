1. When the problem is based on intervals, where we need to find intervals
   type 1: minimum no of groups required to form non overlapping intervals.  
    maximum number of overlapping intervals at any time = minimum number of groups required, such that
   no two intervals should be overlapping.

2. Read about the concept of problem : Zero Array Transformation I
   Approach : Based on the inteval Value we need to find the number of occurance of elements in that interval for
   Ex : [[0, 2] , [1,4], [0, 5], [3, 5]] is poore interval me 1 kitni baar hai 0, kitni baar
   also both inclusive
   Solution : har interval ke starting index ko +1 kro aur (ending element + 1) ko -1 kro
   for example
   index -> [0] => val = 1;
   index -> [3] => val = -1;
   aur aisa krte krte phir har ek element ko array ke each element ke prefixSum ke value se replace krte chalo

3. Take K of Each Character From Left and Right:
   Problem : Read the problem and then you will know that we need to count the value from both sides and which side
   to choose first is very tough to find out.
   we can't even apply dp.
   In this case we need to use sliding window, but
   -> Very Important : to apply sliding window on two ends of the array,
   we can also use Reverse engineering and will try to find out the middle window where out of the windows elements
   occurances are greater than >= k.
   we need to maximize the size of windows so that we can extend the window, and
   this is what our approach will be.

4. finding the pivot element in binarySearch 
   finding the smallest element in sorted and rotated array
   Approach : 
   1. Tip : Whenever we need not to check last element, we can keep e = mid, and 
   if we need to check startInd then we can keep it as s = mid + 1;
   Now whenever the value of mid is smaller than the value of end 
   then e = mid; 
   else s = mid + 1;
   return the start Index 


5. When the problem is based on intervals, where we need to find intervals
   type 1: minimum no of groups required to form non overlapping intervals.  
   maximum number of overlapping intervals at any time = minimum number of groups required, such that
   no two intervals should be overlapping.

6. Read about the concept of problem : Zero Array Transformation I
   Approach : Based on the inteval Value we need to find the number of occurance of elements in that interval for
   Ex : [[0, 2] , [1,4], [0, 5], [3, 5]] is poore interval me 1 kitni baar hai 0, kitni baar
   also both inclusive
   Solution : har interval ke starting index ko +1 kro aur (ending element + 1) ko -1 kro
   for example
   index -> [0] => val = 1;
   index -> [3] => val = -1;
   aur aisa krte krte phir har ek element ko array ke each element ke prefixSum ke value se replace krte chalo

7. Take K of Each Character From Left and Right:
   Problem : Read the problem and then you will know that we need to count the value from both sides and which side
   to choose first is very tough to find out.
   we can't even apply dp.
   In this case we need to use sliding window, but
   -> Very Important : to apply sliding window on two ends of the array,
   we can also use Reverse engineering and will try to find out the middle window where out of the windows elements
   occurances are greater than >= k.
   we need to maximize the size of windows so that we can extend the window, and
   this is what our approach will be.

4.


   

---------------------------------------------------------------------------------------------------

Date : 09-12-24
1. Sieve of Eratothenes
    vector<int> sieveOfEratosthenes(int N) {
        vector<bool> isPrime(N + 1, true); // Use boolean instead of integers 
        vector<int> ans; 
        // Mark 0 and 1 as non-prime 
        isPrime[0] = isPrime[1] = false; 
        for (int i = 2; i * i <= N; i++) { 
        if (isPrime[i]) { 
            // Start marking from i*i, not from 2*i 
            for (int j = i * i; j <= N; j += i) { 
                isPrime[j] = false; 
                } 
            } 
        } 
        for (int i = 2; i <= N; i++) { 
            if (isPrime[i]) { 
                ans.push_back(i); 
            } 
        } 
        return ans;
    }
2. To Check whether an long long is an Integer Use condition like : 
    long long v = some_value;
    if(v == (int) v)
        return true; 

3.  Gcd Code : 
    int gcd(int a, int b){
        if(b == 0) 
            return a;
        return gcd(b, a % b);
    }

4. Minimum Jumps 
    Approach : Greedy Approach will work there
    Code : 
    int minJumps(vector<int> &arr){
        // code here
        if (arr[0] == 0)
            return -1;
        int noOfJumps = 1;
        int i = 1, remJumps = arr[0];
        int n = arr.size();
        while (i < n)
        {
            int maxJump = 1;
            while (remJumps--)
            {
                maxJump = max(maxJump - 1, arr[i]);
                if (i == n - 1)
                    return noOfJumps;
                i++;
            }
            if (maxJump <= 0)
                return -1;
            noOfJumps++;
            remJumps = maxJump;
        }
        return noOfJumps;
    }

5. Print All Divisors from 1 to N
    Approach : We need to find the check for every number 
            for every number will check will the sqrt of the number only
    Code : 
    int sumOfDivisors(int n) {
        // Write Your Code here
        long long totalSum = 0;
        for(int i = 1; i <= n ; i++){
            for(int j = 1; j * j <= i ; j++){
                if(i % j == 0){
                    totalSum += j;
                    if(j != i / j){
                        totalSum += i / j;
                    }
                }
            }
        }
        return (int)totalSum ;
    }

6. Max Prod Array
   Here we will loop from left and right and try to find the max sub array 
   also will move from right to left and  try to find max sub array 
   Note : Reset the prod val to 1, whenever encountered 0. 

7. Next Permutation : 
    Approach : 
    1. Find the first element from right, where nums[i-1] < nums[i]
    2. Find the first element from right where nums[i] > nums[ind]
    3. Swap the element at nums[i] and nums[ind]
    4. Reverse the array from ind + 1 to end of the array.

8. Longest Consequtive sequence 
    Approach : 
    1. Store all the elements in the set
    2. Loop throught the set and check if the element -1 of the current element exists or not 
    3. If not then start the loop from the current element + 1, and keep the counter as cnt + 1, and update the current val + 1
    4. Update the max value of the cnt and return the max value as longest





26-02-25 -------> To Revise -  
1. Maximum Absolute Sum of Any Subarray
    Approach : 
    1. Find the maximum subarray sum and minimum subarray sum (Kadane's Algorithm)
    2. Return the maximum of the absolute value of the maximum subarray sum and minimum subarray sum
    3. CRITICAL NOTE : initialise answer with the first value of array in both

2. Set Matrix 0
    Approach : 
    1. check for the first row and col if they contain 0 or not
    2. loop from 1 -> n and 1 -> m and check if any of them contains 0 then set both row and column to 0 
    3. at last check and set the first row and column if they contain 0;

3. Kanh's Algorithm (Topological Sort using BFS)
    Approach : 
    1. Store the indegree of all the nodes
    2. Store the nodes with indegree 0 in the queue
    3. Loop through the queue and pop the element and push the element in the answer
    4. Decrease the indegree of the nodes and if the indegree becomes 0 then push the element in the queue

4. Cycle Detection in a Directed Graph using BFS (using Kanh's Algorithm)
    Approach : 
    1. Doing usual Kanhs Algorithm
    2. At last will check the answer array, if the size of ans array is equal to n then no cycle 
    3. Since Kanhs Algorithm will only work for Directed Acyclic Graph
    4. if the size of ans array is not equal to n then there is a cycle




28-02-25
1. Implement Trie
    Approach : Using unordered_map
    1. Create a TrieNode with unordered_map<char, TrieNode*>
    2. Insert the word in the trie
    3. Search the word in the trie
    4. Search the prefix in the trie


04-03-25
1. 3 sum
    Approach : 
    1. Take a set data structure
    2. sort the given array, 
    3. loop through the array and take two pointers left and right
    4. if the sum of the three elements is equal to 0 then insert the elements in the set
    5. if the sum is less than 0 then increment the left pointer
    6. if the sum is greater than 0 then decrement the right pointer
    7. return the set replaced with vector
    Optimization NOTE : Make sure to skip the duplicate elements in the array
    
06-03-2025
1. Minimum Falling Path Sum: 
    Approach : 
    1. Loop through the array from 1 -> n and 1 -> m
    2. Update the value of the current element with the minimum of the previous row elements
    3. Return the minimum of the last row elements

07-03-2025
1. Longest Route (coding ninja's problem)
    Approach : 
    1. Use DFS to find the longest route throughout the Matrix
    2. also do not forget to mark the paths unvisited again so that the other paths should be traversed as well
    3. This problem you can see under graphs folder named as longest route problem
    4. the catch here is if you see the question asking the shortest route value then you should try bfs traversal
    5. but when you see asking question a longest route then you should try dfsTraversal
    Graph Note :
    Shortest Path → BFS
    Longest Path → DFS (with backtracking to unmark visited nodes)

2. Closest Prime Numbers in Range (leetcode's Problem)
    Algorithm : 
    1. Sieve of Eratosthenes
    2. Find the closest prime numbers in the range
    3. Find the minimum difference between the prime numbers
    4. Return the prime numbers with minimum difference
    
    
10-03-25
1. Minimum falling path Sum 
    Approach :
    1.



03-04-25
Problem Name - Maximum Ordered Triplet - I and II (look for link of leetcode) 
    Observation - ye problem me aapko ye dekhna hai ki aapko maximum ordered triplet kaise milega
    Approach - 

    Given - (x - y ) * z ko maximize krna hai, toh we need to minimize the value of y and maximise the value of x and y. 
    how can we do this

    see sabse pahele ek saath 2 element(x, z) dono ko maximize nhi kr payenge
    toh hamne kya kiya we found the maximum right value of each element yaani ki ----- Z
    and then hamne maximum value of left of y, yaani ki x ke maximum value of liya and then we kept on storing it in a variable.




Lambda Function Syntax
    cpp[capture](parameters) -> return_type { body }
    For sorting, the common pattern is:
    cpp[](const Type& a, const Type& b) { return condition; }


When Use BFS in case of Graphs:
1. When you need to find the shortest path in an unweighted graph.
2. When you need to explore all nodes at the present depth prior to moving on to nodes
at the next depth level.
3. When you need to find the minimum number of edges to reach a target node.
4. When you need lexicogramphically smallest topological Order


When Use DFS in case of Graphs:
1. When you need to explore all possible paths in a graph.
2. When you need to find a path from the source to the target node.
3. When you need to check for cycles in a directed or undirected graph.
4. When you need to find connected components in a graph.
5. When you need to perform topological sorting in a directed acyclic graph (DAG).



When Use Dijkstra's Algorithm:
1. When you need to find the shortest path in a weighted graph with non-negative weights.
2. When you need to find the minimum cost to reach a target node.
3. When you need to find the shortest path from a source node to all other nodes in
    the graph.


Use Case : 
1. When you need to find the shortest path in a DAG then you can use Topological Sort
2. When you need to find shorted path in a cyclic graph then you can use Dijkstra's Algorithm but no negative weights
3. When you need to find the shortest path in a cyclic graph with negative weights then you can use Bellman-Ford Algorithm
4. When you need to find the shortest path in an unweighted graph then you can use BFS




🔑 Summary:
Unweighted graph → BFS (fastest and simplest).

Weighted (positive) → Dijkstra.

Weighted (negative) → Bellman-Ford.

All-pairs shortest paths → Floyd-Warshall / Johnson's.




Concept for monotonic Stack problems : 
1. hame har bar O(n) me krne ke liye ye sochna hai ki kaise har element ke next/prev greater or 
next/prev smaller element ko find kr paye and is type ke Concepts ka use krke problem ko kaise solve kare


📊 Common Problem Types

Monotonic stack concepts appear in many problems:

Next Greater/Smaller Element (basic versions)

Largest Rectangle in Histogram

Sum of Subarray Ranges

Trapping Rain Water

Stock Span Problem

Daily Temperatures

Asteroid Collision

Maximum of minimums for every window size

All of them reduce to:
➡️ “Find boundary (next/prev greater/smaller) efficiently in O(n).”

🧠 Think This Way

Whenever a problem involves:

"Nearest" element greater/smaller on left/right, OR

Subarray ranges defined by greater/smaller boundaries

👉 Immediately think monotonic stack.



Two Pointers Techniques :
    Type 1 : When you need count in such subarrays where counting the subarray is not monotonic
            Ex. Problems : Count subarrays with fixed bounds, Count subarrays with sum at most K, Count subarrays with sum exactly K
            Solution Techniques : Sliding Window, Prefix Sum
    Type 2 : When you need to find something from two ends of a array and then have to find something in between,
            Ex. Problems : Maximum points you can obtain from cards, Find the maximum sum of a subarray of fixed size, Find the minimum sum of a subarray of fixed size
            Solution Techniques : Two Pointers  
    Type 3 : When you need to find the longest or smallest subarray with some condition
            Ex. Problems : Longest subarray with at most K distinct elements, Smallest subarray with sum at least K
            Solution Techniques : Two Pointers 
            
    Type 4 : When you need to find the maximum or minimum subarray with some condition
            Ex. Problems : Maximum subarray sum, Minimum subarray sum
